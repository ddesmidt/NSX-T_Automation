# Remain
   # update /etc/hosts
   # update file with DB IP@ + restart service
   # bug with NSGroup IP@
   # Delete VMs files in DataStore

   
# NSX-T Creation of Demo App
## Author: Dimitri Desmidt
## version 1.0
## April 2018

'''
Topology:
            +---------------+
            |   Tier-0      |
            | (pre-created) |    
            +---------------+
                   |
                   |
                   |
            +--------------+
            |   Tier-1     |
            |  (with LB)   |
            +--------------+
                    |.1
                    |
  LS-PlaneSpotter   |  10.1.1.0 /24
+------------------------------------|
       |        |            (DFW 1 Section + Rules)
    VM-Web1  VM-Web2         (NSGroups Web)

Validated with: NSX-T 2.1 and 2.2
'''

import requests
import json
import datetime
from pyVmomi import vim
from pyVim.connect import SmartConnect, Disconnect
import vmutils
import ssl
import time

# NSX-T information
manager_ip="10.114.213.8"
login="admin"
password="VMware1!"
tz_name="TZ-Overlay"
edge_cluster_name="EdgeBM-ClusterAA(Dimi)"
t0_name="Tier0-AA(EdgeBM_Dimi)"
lb_vip="10.114.213.168"

# vCenter information
vcenter_ip="10.114.213.4"
vcenter_user="administrator@vsphere.local"
vcenter_pwd="VMware1!"
cluster_name = 'Compute_Cluster'
clone_vmsource = 'Template-Ubuntu'
datacenter_name = 'DC1'
datastore_name = 'NFS_DG'

prefix_name = "Python"

######################################################################################################
# Don't change things below
######################################################################################################

start_time= datetime.datetime.now()

#remove the self certificate warnings
requests.packages.urllib3.disable_warnings()

# headers for NSX-T Restful API calls
headers = {'Content-type': 'application/json', 'Accept': 'application/json'}

# vCenter accept self-signed certs
s = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
s.verify_mode = ssl.CERT_NONE

def nsxt_get_call (mgr, uri):
    response = requests.get('https://'+mgr+uri, verify=False, auth=(login, password), headers=headers, stream=True)
    if "20" not in str(response.status_code):
        print "GET uri " + uri + " response status code: "+str(response.status_code)
        print response.text
    #As the answer is in JSON format, create the proper object
    json_response=json.loads(response.text)
    return json_response

def nsxt_find_call (mgr, uri, name):
    json_response = nsxt_get_call (mgr, uri)
    rerun = 'true'
    object_list = []
    # Create list of elements to find
    while (rerun == 'true' and len(json_response['results']) > 0):
        for result in (json_response['results']):
            if name == result['display_name']:
                object_list.append(result)
                break
        if ('cursor' in json_response):
            json_response = nsxt_get_call (mgr, uri,cursor=json_response['cursor'])
        else:
            rerun = 'false'
    return object_list
    
def nsxt_post_call (mgr, uri, payload):
    response = requests.post('https://'+mgr+uri, verify=False, auth=(login, password), headers=headers, stream=True, data=json.dumps(payload))
    if "20" not in str(response.status_code):
        print "POST uri " + uri + " response status code: "+str(response.status_code)
        print response.text
    #As the answer is in JSON format, create the proper object
    json_response=json.loads(response.text)
    return json_response

def nsxt_put_call (mgr, uri, payload):
    response = requests.put('https://'+mgr+uri, verify=False, auth=(login, password), headers=headers, stream=True, data=json.dumps(payload))
    if "20" not in str(response.status_code):
        print "PUT uri " + uri + " response status code: "+str(response.status_code)
        print response.text
    #As the answer is in JSON format, create the proper object
    json_response=json.loads(response.text)
    return json_response

    
    
def vCenter_wait_for_task(task):
    while True:
        if task.info.state == vim.TaskInfo.State.success:
            return
        if task.info.state == vim.TaskInfo.State.error:
            raise Exception('task failed')
        time.sleep(1)
        
def vCenter_get_obj(content, vimtype, name):
    obj = None
    container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, True)
    for c in container.view:
        if c.name == name:
            obj = c
            break
    return obj
    
def vCenter_get_list_snapshots(snapshots):
    snapshots_list = []
    for snapshot in snapshots:
        snapshot_mob = snapshot.snapshot
#        snapshot_mob = snapshot.snapshot
        snapshots_list.append(snapshot_mob)
        snapshots_list = snapshots_list + vCenter_get_list_snapshots(snapshot.childSnapshotList)
#        vCenter_get_list_snapshots(snapshot.childSnapshotList)
    return snapshots_list

def vCenter_LinkedCloneVM_onLS(vcenter, datacenter_name, cluster_name, datastore_name, clone_vmsource_name, \
        clone_vmdest_name, nsxt_ls, vm_ip, vm_subnet, vm_gw, vm_hostname, vm_hostdomain):
    # Find MOB for datacenter, cluster, datastore, clone_vmsource_name
    datacenter_mob = vCenter_get_obj(content, [vim.Datacenter], datacenter_name)
    cluster_mob = vCenter_get_obj(content, [vim.ClusterComputeResource], cluster_name)
    datastore_mob = vCenter_get_obj(content, [vim.Datastore], datastore_name)
    clone_vmsource_mob = vCenter_get_obj(content, [vim.VirtualMachine], clone_vmsource_name)

    # Relocation spec (datastore + VC_cluster of the new VM + "diskMoveType" for fast Linked_Clone)
    relospec = vim.vm.RelocateSpec()
    relospec.diskMoveType = 'createNewChildDiskBacking'
    relospec.datastore = datastore_mob
    relospec.pool = cluster_mob.resourcePool

    
    # Change NIC connection of the new VM
    vmconf = vim.vm.ConfigSpec()
    device_change = []
    for device in clone_vmsource_mob.config.hardware.device:
        if isinstance(device, vim.vm.device.VirtualEthernetCard):
            nicspec = vim.vm.device.VirtualDeviceSpec()
            nicspec.operation = vim.vm.device.VirtualDeviceSpec.Operation.edit
            nicspec.device = device
            nicspec.device.backing = vim.vm.device.VirtualEthernetCard.OpaqueNetworkBackingInfo()
            nicspec.device.backing.opaqueNetworkId = str(nsxt_ls)
            nicspec.device.backing.opaqueNetworkType = 'nsx.LogicalSwitch'
            nicspec.device.externalId=None
            device_change.append(nicspec)
            break       
    vmconf.deviceChange = device_change

    # Change IP settings of the new VM
    adaptermap = vim.vm.customization.AdapterMapping()
    adaptermap.adapter = vim.vm.customization.IPSettings()
    adaptermap.adapter.ip = vim.vm.customization.FixedIp()
    adaptermap.adapter.ip.ipAddress = vm_ip
    adaptermap.adapter.subnetMask = vm_subnet
    adaptermap.adapter.gateway = vm_gw

    globalip = vim.vm.customization.GlobalIPSettings()
    globalip.dnsServerList = '172.16.1.2'
       
    ident = vim.vm.customization.LinuxPrep(domain=vm_hostdomain, hostName=vim.vm.customization.FixedName(name=vm_hostname))

    customspec = vim.vm.customization.Specification()
    customspec.identity = ident
    customspec.nicSettingMap = [adaptermap]
    customspec.globalIPSettings = globalip

    # Clone new VM with those settings
    # For fast Linked_Clone, snapshot has to be used (in my example I want to use the last one)
    clonespec = vim.vm.CloneSpec()
    clonespec.location = relospec   
    clonespec.config = vmconf
    clonespec.customization = customspec
    clonespec.powerOn = True
    clonespec.template = False
    clonespec.snapshot = vCenter_get_list_snapshots(clone_vmsource_mob.snapshot.rootSnapshotList)[-1]

    
    task = clone_vmsource_mob.Clone(folder=datacenter_mob.vmFolder, name=clone_vmdest_name, spec=clonespec)
    print "    Compute - Cloning VM " + clone_vmdest_name
    vCenter_wait_for_task(task)
    return


######
#Connect to vCenter
######
vcenter = SmartConnect(host=vcenter_ip, user=vcenter_user, pwd=vcenter_pwd, sslContext=s)
content = vcenter.RetrieveContent()

    
######
#GET TZ Overlay UUID
######
tz = nsxt_find_call (manager_ip, '/api/v1/transport-zones', tz_name)
tz_id = tz[0]['id']
#print "TZ_id = "+tz_id

        
######
#Create LR "Python_LR" connected to LS "Python_LS"
######
print "=== Create App"

###
#Create LS
###
#Create Switch Profile Overlay that learns multiple IP@ (requirement for PlaneSpotter because the VM at first boot get a temporary IP@
swprofile_name = prefix_name+'_SW_Profile'
payload ={'resource_type': 'IpDiscoverySwitchingProfile', 'display_name': swprofile_name, \
        'vm_tools_enabled': 'True', 'arp_bindings_limit': 2}
json_response = nsxt_post_call(manager_ip, '/api/v1/switching-profiles', payload)
swprofile_id = json_response['id']
# Create LS
ls_name = prefix_name+'_LS'
payload ={'transport_zone_id': tz_id.encode('ascii','ignore'), 'replication_mode': 'MTEP', 'admin_state': 'UP', 'display_name': ls_name, \
        'switching_profile_ids': [{'value': swprofile_id, 'key': 'IpDiscoverySwitchingProfile'}],}
json_response = nsxt_post_call(manager_ip, '/api/v1/logical-switches', payload)
ls_id = json_response['id']
print "    Network - Created LS " + ls_name


###
#Create LS-Port
###
payload ={'logical_switch_id': ls_id.encode('ascii','ignore'), 'admin_state': 'UP', 'description': 'LR-port'}
json_response = nsxt_post_call(manager_ip,'/api/v1/logical-ports', payload)
lsport_id = json_response['id']

###
#Clone all VMs
###
#Clone Web1
vm_ip = '10.1.1.11'
vm_subnet = '255.255.255.0'
vm_gw = '10.1.1.1'
vm_vcentername = prefix_name+'Web1'
vm_hostname = prefix_name+'Web1'
vm_hostdomain = 'dimi.fr'
vCenter_LinkedCloneVM_onLS(vcenter, datacenter_name, cluster_name, datastore_name, clone_vmsource, \
        vm_vcentername, ls_id, vm_ip, vm_subnet, vm_gw, vm_hostname, vm_hostdomain)

#Clone Web2
vm_ip = '10.1.1.12'
vm_subnet = '255.255.255.0'
vm_gw = '10.1.1.1'
vm_vcentername = prefix_name+'Web2'
vm_hostname = prefix_name+'Web2'
vm_hostdomain = 'dimi.fr'
vCenter_LinkedCloneVM_onLS(vcenter, datacenter_name, cluster_name, datastore_name, clone_vmsource, \
        vm_vcentername, ls_id, vm_ip, vm_subnet, vm_gw, vm_hostname, vm_hostdomain)

###
#Create LR + LR-Port
###
#Create LR
t1_name = prefix_name+'_LR'
edge_cluster = nsxt_find_call (manager_ip, '/api/v1/edge-clusters', edge_cluster_name)
edge_cluster_id = edge_cluster[0]['id']
payload ={'resource_type': 'LogicalRouter', 'display_name': t1_name, 'router_type': 'TIER1', 'edge_cluster_id': edge_cluster_id}
json_response = nsxt_post_call(manager_ip, '/api/v1/logical-routers', payload)
t1_id = json_response['id']
print "    Network - Created LR " + t1_name

#Create LR-Port-Downlink
lr_ip = '10.1.1.1'
payload ={'resource_type': 'LogicalRouterDownLinkPort', 'logical_router_id': t1_id, \
        'linked_logical_switch_port_id': {'target_type': 'LogicalPort', 'target_id': lsport_id}, 'subnets': [{'ip_addresses': [lr_ip], 'prefix_length': '24'}]}
json_response = nsxt_post_call(manager_ip, '/api/v1/logical-router-ports', payload)

#Create Tier-0 LR-Port unplugged
t0 = nsxt_find_call (manager_ip, '/api/v1/logical-routers', t0_name)
t0_id = t0[0]['id']
payload ={'resource_type': 'LogicalRouterLinkPortOnTIER0', 'logical_router_id': t0_id}
json_response = nsxt_post_call(manager_ip, '/api/v1/logical-router-ports', payload)
t0_lrport_id = json_response['id']

#Attach Tier-0 LR-Port to Tier-1
payload ={'resource_type': 'LogicalRouterLinkPortOnTIER1', 'logical_router_id': t1_id, 'linked_logical_router_port_id': {'target_id': t0_lrport_id}}
json_response = nsxt_post_call(manager_ip, '/api/v1/logical-router-ports', payload)

#Advertise LB-VIP
route_adv = nsxt_get_call (manager_ip, '/api/v1/logical-routers/'+t1_id+'/routing/advertisement')
#route_adv["advertise_nsx_connected_routes"]=True
route_adv["advertise_lb_vip"]=True
route_adv["enabled"]=True
json_response = nsxt_put_call(manager_ip, '/api/v1/logical-routers/'+t1_id+'/routing/advertisement', route_adv)
print "    Network - Attached to Tier-0 and advertise connected LS"

###
#Create LB + NSGroup + Pool + VIP
###
#Create NSGroups
nsgroup_name = prefix_name+'_NSGroup_Web'
payload ={'display_name': nsgroup_name, 'membership_criteria': [{'resource_type': 'NSGroupSimpleExpression', 'op': 'CONTAINS', \
            'target_type': 'VirtualMachine', 'value': prefix_name+'Web', 'target_property': 'name'}],}
json_response = nsxt_post_call(manager_ip, '/api/v1/ns-groups', payload)
nsgroup_web_id = json_response['id']

print "    Security - Created NSGroups"

#Create LB_Active_Monitor
lbmonitor_name = prefix_name+'_Monitor'
payload ={'resource_type': 'LbHttpMonitor', 'display_name': lbmonitor_name, 'interval': 1, 'timeout': 3, 'rise_count': 3, \
        'fall_count': 3, 'response_status_codes': [200],'request_method': 'GET', 'request_url': '/test.php'}
json_response = nsxt_post_call(manager_ip, '/api/v1/loadbalancer/monitors', payload)
lbmonitor_name_id = json_response['id']

#Create LB_Pool
lbpool_name = prefix_name+'_Pool'
#payload ={'member_group': {'grouping_object': {'target_type': 'NSGroup', 'target_id': nsgroup_web_id }, 'max_ip_list_size': 5}, \
#        'active_monitor_ids': [lbmonitor_name_id], 'display_name': lbpool_name}
payload ={"members":[{"display_name":"Web1","ip_address":"10.1.1.11","port":"80"}, {"display_name":"Web2","ip_address":"10.1.1.12","port":"80"}], \
    'active_monitor_ids': [lbmonitor_name_id], 'display_name': lbpool_name}
json_response = nsxt_post_call(manager_ip, '/api/v1/loadbalancer/pools', payload)
lbpool_id = json_response['id']

#Create LB_VS
lbvs_name = prefix_name+'_VS'
lb_vip = lb_vip
app_profile = nsxt_find_call (manager_ip, '/api/v1/loadbalancer/application-profiles', 'nsx-default-lb-http-profile')
app_profile_id = app_profile[0]['id']
payload ={'pool_id': lbpool_id, 'default_pool_member_port' : '80', 'application_profile_id': app_profile_id, \
            'ip_address': lb_vip, 'port': '80', 'display_name': lbvs_name}
json_response = nsxt_post_call(manager_ip, '/api/v1/loadbalancer/virtual-servers', payload)
lbvs_id = json_response['id']

#Create LB
lb_name = prefix_name+'_LB'
payload ={'attachment': {'target_type': 'LogicalRouter', 'target_id': t1_id}, 'display_name': lb_name, 'size': 'SMALL', 'virtual_server_ids': [lbvs_id],}
json_response = nsxt_post_call(manager_ip, '/api/v1/loadbalancer/services', payload)
print "    Network - Created LB + Pool + VIP "

###
#Create DFW Section + Rule
###
#Create DFW section
dfwsection_name = prefix_name+'_Section'
payload ={'display_name': dfwsection_name, 'section_type': 'LAYER3', \
        "applied_tos": [{'target_type': 'LogicalSwitch', 'target_id': ls_id}], 'stateful': 'true'}
json_response = nsxt_post_call(manager_ip, '/api/v1/firewall/sections', payload)
dfwsection_id = json_response['id']

#Create DFW rules
http_service = nsxt_find_call (manager_ip, '/api/v1/ns-services', 'HTTP')
http_service_id = http_service[0]['id']
dfwrule_name = 'PlaneSpotter-Web'
payload ={'display_name': dfwrule_name, 'destinations': [{'target_type': 'NSGroup', 'target_id': nsgroup_web_id}], \
        'services': [{'target_type': 'NSService', 'target_id': http_service_id}], \
        'ip_protocol': 'IPV4', 'action': 'ALLOW'}
json_response = nsxt_post_call(manager_ip, '/api/v1/firewall/sections/'+dfwsection_id+'/rules', payload)

print "    Security - Created DFW Section + Rules " + dfwsection_name

end_time= datetime.datetime.now()
print 'script started at ' + start_time.strftime("%Y-%m-%d %H:%M:%S")
print 'script ended at ' + end_time.strftime("%Y-%m-%d %H:%M:%S")
total_time = end_time - start_time
print 'total time '+str(total_time).split(".")[0]
